(*
 * oBus_interfaces.obus
 * --------------------
 * Copyright : (c) 2010, Jeremie Dimino <jeremie@dimino.org>
 * Licence   : BSD3
 *
 * This file is a part of obus, an ocaml implementation of D-Bus.
 *)

interface org.freedesktop.DBus.Peer {
  method Ping : () -> ()
  method GetMachineId : () -> (machine_id : string)
}

interface org.freedesktop.DBus.Introspectable {
  method Introspect : () -> (result : string)
}

interface org.freedesktop.DBus.Properties {
  method Get : (interface_name : string, member : string) -> (value : variant)
  method Set : (interface_name : string, member : string, value : variant) -> ()
  method GetAll : (interface_name : string) -> (values : (string, variant) dict)
  signal PropertiesChanged : (interface_name : string, updates : (string, variant) dict, invalidates : string array)
}

interface org.freedesktop.DBus {
  method Hello : () -> (name : string)

  flag request_name_flags : uint32 {
    0b001: allow_replacement
    0b010: replace_existing
    0b100: do_not_queue
  }

  enum request_name_result : uint32 {
    1: primary_owner
    2: in_queue
    3: exists
    4: already_owner
  }

  method RequestName : (name : string, flags : request_name_flags) -> (result : request_name_result)

  enum release_name_result : uint32 {
    1: released
    2: non_existent
    3: not_owner
  }

  method ReleaseName : (name : string) -> (result : release_name_result)

  enum start_service_by_name_result : uint32 {
    1: success
    2: already_running
  }

  method StartServiceByName : (name : string, flags : uint32) -> (result : start_service_by_name_result)

  method UpdateActivationEnvironment : (x1 : (string, string) dict) -> ()
  method NameHasOwner : (x1 : string) -> (x1 : boolean)
  method ListNames : () -> (x1 : string array)
  method ListActivatableNames : () -> (x1 : string array)
  method AddMatch : (x1 : string) -> ()
  method RemoveMatch : (x1 : string) -> ()
  method GetNameOwner : (x1 : string) -> (x1 : string)
  method ListQueuedOwners : (x1 : string) -> (x1 : string array)
  method GetConnectionUnixUser : (x1 : string) -> (x1 : uint32)
  method GetConnectionUnixProcessID : (x1 : string) -> (x1 : uint32)
  method GetAdtAuditSessionData : (x1 : string) -> (x1 : byte array)
  method GetConnectionSELinuxSecurityContext : (x1 : string) -> (x1 : byte array)
  method ReloadConfig : () -> ()
  method GetId : () -> (x1 : string)
  signal NameOwnerChanged : (x1 : string, x2 : string, x3 : string)
  signal NameLost : (x1 : string)
  signal NameAcquired : (x1 : string)
}
